{
  "hash": "50a4eb35ccd9079fdc4c6e21f2afb3ae",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"EPPS 6323: Lab01 R programming basics I\"\nauthor: \"My name\"\nformat: html\neditor: visual\n---\n\n\n\nR Programming Basic Commands\n\nCreate object using the assignment operator (<-, =)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1,3,2,5)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 3 2 5\n```\n\n\n:::\n\n```{.r .cell-code}\nx = c(1,6,2)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 6 2\n```\n\n\n:::\n\n```{.r .cell-code}\ny = c(1,4,3)\n```\n:::\n\n\n\nUsing function\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(x)  # What does length() do?\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\n# length() measures the number of elements in a vector\nlength(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n\nUsing +, -, *, /,^ operators\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx+y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2 10  5\n```\n\n\n:::\n\n```{.r .cell-code}\nls() # List objects in the environment\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"x\" \"y\"\n```\n\n\n:::\n\n```{.r .cell-code}\nrm(x,y) # Remove objects\nls()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\nrm(list=ls()) # Danger! What does this do? Not recommended!\n# It deletes all objects from the workspace, clearing the environment completely.\n```\n:::\n\n\n\nMatrix operations\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?matrix\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nstarting httpd help server ... done\n```\n\n\n:::\n\n```{.r .cell-code}\nx=matrix(data=c(1,2,3,4), nrow=2, ncol=2) # Create a 2x2 matrix object\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n```\n\n\n:::\n\n```{.r .cell-code}\nx=matrix(c(1,2,3,4),2,2)\nmatrix(c(1,2,3,4),2,2,byrow=T) # What about byrow=F?\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n```\n\n\n:::\n\n```{.r .cell-code}\n# byrow=FALSE (default) fills the matrix column-wise, while byrow=TRUE fills it row-wise.\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(x) # What does x look like?\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         [,1]     [,2]\n[1,] 1.000000 1.732051\n[2,] 1.414214 2.000000\n```\n\n\n:::\n\n```{.r .cell-code}\n# x remains the same, but sqrt(x) returns the square root of each element.\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n```\n\n\n:::\n\n```{.r .cell-code}\nx^2 # Squares each element in x\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    1    9\n[2,]    4   16\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx=rnorm(50) # Generate a vector of 50 numbers using the rnorm() function\n\ny=x+rnorm(50,mean=50,sd=.1) # What does rnorm(50,mean=50,sd=.1) generate?\n# It generates 50 random numbers with a normal distribution centered at mean=50 and standard deviation=0.1.\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncor(x,y) # Correlation of x and y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9920413\n```\n\n\n:::\n\n```{.r .cell-code}\nset.seed(1303) # Set the seed for Random Number Generator (RNG) to generate values that are reproducible.\nrnorm(50)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] -1.1439763145  1.3421293656  2.1853904757  0.5363925179  0.0631929665\n [6]  0.5022344825 -0.0004167247  0.5658198405 -0.5725226890 -1.1102250073\n[11] -0.0486871234 -0.6956562176  0.8289174803  0.2066528551 -0.2356745091\n[16] -0.5563104914 -0.3647543571  0.8623550343 -0.6307715354  0.3136021252\n[21] -0.9314953177  0.8238676185  0.5233707021  0.7069214120  0.4202043256\n[26] -0.2690521547 -1.5103172999 -0.6902124766 -0.1434719524 -1.0135274099\n[31]  1.5732737361  0.0127465055  0.8726470499  0.4220661905 -0.0188157917\n[36]  2.6157489689 -0.6931401748 -0.2663217810 -0.7206364412  1.3677342065\n[41]  0.2640073322  0.6321868074 -1.3306509858  0.0268888182  1.0406363208\n[46]  1.3120237985 -0.0300020767 -0.2500257125  0.0234144857  1.6598706557\n```\n\n\n:::\n\n```{.r .cell-code}\nset.seed(3) # Try different seeds?\n# Different seeds produce different sequences of random numbers.\ny=rnorm(100)\n```\n:::\n\n\n\nSimple descriptive statistics (base)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(y) # Calculates the mean (average) of y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.01103557\n```\n\n\n:::\n\n```{.r .cell-code}\nvar(y) # Computes the variance of y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.7328675\n```\n\n\n:::\n\n```{.r .cell-code}\nsqrt(var(y)) # Computes the standard deviation manually\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.8560768\n```\n\n\n:::\n\n```{.r .cell-code}\nsd(y) # Standard deviation of y (same as sqrt(var(y)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.8560768\n```\n\n\n:::\n:::\n\n\n\nVisualization using R Graphics (without packages)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx=rnorm(100)\ny=rnorm(100)\nplot(x,y) # Creates a scatter plot of x vs y\n```\n\n::: {.cell-output-display}\n![](Lab01_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(x,y, pch=20, col = \"firebrick\") # Scatterplot for two numeric variables by default\n```\n\n::: {.cell-output-display}\n![](Lab01_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(x,y, pch=20, col = \"steelblue\",xlab=\"this is the x-axis\",ylab=\"this is the y-axis\",main=\"Plot of X vs Y\") # Add labels\n```\n\n::: {.cell-output-display}\n![](Lab01_files/figure-html/unnamed-chunk-10-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npdf(\"Figure01.pdf\") # Save as pdf, add a path or it will be stored on the project directory\nplot(x,y,pch=20, col=\"forestgreen\") # Try different colors?\n# Different colors can be used to distinguish elements visually.\ndev.off() # Close the file using the dev.off function\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\npng \n  2 \n```\n\n\n:::\n:::\n\n\nx=seq(1,10) # Same as x=c(1:10)\nx\nx=1:10\nx\nx=seq(-pi,pi,length=50) # Generates 50 equally spaced values between -pi and pi\ny=x\n",
    "supporting": [
      "Lab01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}